test['PoolQC'] <- NULL
noNA_test <- knnImputation(test) #Valores por defecto
?write.csv
write.csv(noNA_train, file = "notNA_train.csv", sep = ",")
write.csv(noNA_train, file = "notNA_train.csv", sep = ",")
write.csv(noNA_train, file = "notNA_train.csv", sep = ",", row.names = FALSE)
write.csv(noNA_test, file = "notNA_test.csv", sep = ",", row.names = FALSE)
summart(noNA_train)
noNA_train <- knnImputation(train) #Valores por defecto
summary(noNA_train)
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
?preProcess
??preProcess
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
preprocess_train <- preProcess(train, method = c("center", "scale", "knnImpute"))
preprocess_train <- preProcess(train, method = c("center", "scale", "knnImpute"))
preprocess_test <- preProcess(test, method = c("center", "scale", "knnImpute"))
predict(preprocess_train, train)
new_train <- predict(preprocess_train, train)
package(RANN)
install.packages (“foreign”)
install.packages("RANN")
new_train <- predict(preprocess_train, train)
new_test <- predict(preprocess_test, test)
write.csv(train, file = "train.csv", sep = ",", row.names = FALSE)
write.csv(test, file = "test.csv", sep = ",", row.names = FALSE)
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
setwd("~/Desktop/Universidad/IN/P3/Versión 5")
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
setwd("~/Desktop/Universidad/IN/P3/Versión 5")
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
new_train
noNA_train
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
new_train
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
noNA_train
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
new_train
train[1]
train_label <- train[1]
train_label <- train[1]
train_label <- train[1]
test_label <- test[1]
train <- train[1:length(train)]
test <- test[1:length(test)]
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
train_label + train
c(train_label, train)
aux <- c(train_label, train)
aux
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
aux_train
write.csv(aux_test, file = "test.csv", sep = ",", row.names = FALSE)
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
train = read.csv("../train.csv", header = TRUE, sep = ",")
summary(train)
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
aux_train
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
preprocess_train <- preProcess(noNA_train, method = "scale")
aux1 <- train[1]
aux2 <- train[2:length(train)]
typeof(aux1)
typeof(aux2)
tipeof(train)
typeof(train)
aux <- list(aux1, aux2)
aux
summary(aux)
summary(train)
train[,-1]
train[,1]
train[1]
train['Alley']
train = read.csv("../train.csv", header = TRUE, sep = ",")
train['Alley']
train_label <- train[,1]
train_label
train['Alley']
train = read.csv("../train.csv", header = TRUE, sep = ",")
test = read.csv("../test.csv", header = TRUE, sep = ",")
## Aunque utilicemos predicción para el resto de valores perdidos, eliminamos aquellos que tienen demasiados
## No pueden estimarse el resto de valores
train['Alley'] <- NULL
train['MiscFeature'] <- NULL
train['Fence'] <- NULL
train['PoolQC'] <- NULL
test['Alley'] <- NULL
test['MiscFeature'] <- NULL
test['Fence'] <- NULL
test['PoolQC'] <- NULL
train_label <- train[,1]
train_data <- train[,-1]
test_label <- test[,1]
test_data <- test[,-1]
noNA_train <- knnImputation(train) #Valores por defecto
noNA_test <- knnImputation(test) #Valores por defecto
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
aux1 <- train[,1]
aux2 <- train[,-1]
aux <- c(aux1,aux2)
aux
aux <- list(aux1,aux2)
aux
aux1
aux1 + axu2
aux1 + aux2
aux1
aux2
train
source('~/Desktop/Universidad/IN/P3/Versión 4/preprocesado_v4.R')
train[-1]
train[length(train)]
write.csv(test, file = "test.csv", sep = ",", row.names = FALSE)
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
train
train[1]
train[1] <- id_train
train[1]
train = read.csv("../train.csv", header = TRUE, sep = ",")
test = read.csv("../test.csv", header = TRUE, sep = ",")
#quitamos_id
id_train <- train[1]
id_test <- test[1]
train <- train[-1]
test <- test[-1]
## No pueden estimarse el resto de valores
train['Alley'] <- NULL
train['MiscFeature'] <- NULL
train['Fence'] <- NULL
train['PoolQC'] <- NULL
test['Alley'] <- NULL
test['MiscFeature'] <- NULL
test['Fence'] <- NULL
test['PoolQC'] <- NULL
#labels
train_l <- train[length(train)]
test_l <- test[length(test)]
#data
train_data <- train[-length(train)]
test_data <- test[-length(test)]
#Estimamos el resto de valores perdidos
noNA_train <- knnImputation(train_data) #Valores por defecto
noNA_test <- knnImputation(test_data) #Valores por defecto
preprocess_train <- preProcess(noNA_train, method = c("scale"))
preprocess_test <- preProcess(noNA_test, method = c("scale"))
new_train <- predict(preprocess_train, noNA_train)
new_test <- predict(preprocess_test, noNA_test)
train[1] <- id_train
train[2:length(train)-1] <- new_train
train[length(train)] <- train_l
test[1] <- id_test
test[2:length(test)-1] <- new_test
test[length(test)] <- test_l
train
summary(train)
train = read.csv("../train.csv", header = TRUE, sep = ",")
summary(train)
id_train <- train[1]
id_train
train[length(train)]
?read.csv
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
summary(noNA_train)
###### EN ESTE ARCHIVO VAMOS A LLEVAR A CABO EL PREPROCESADO DE LOS DATOS
train = read.csv("../train.csv", header = TRUE, sep = ",")
test = read.csv("../test.csv", header = TRUE, sep = ",")
## Aunque utilicemos predicción para el resto de valores perdidos, eliminamos aquellos que tienen demasiados
## No pueden estimarse el resto de valores
train['Alley'] <- NULL
train['MiscFeature'] <- NULL
train['Fence'] <- NULL
train['PoolQC'] <- NULL
test['Alley'] <- NULL
test['MiscFeature'] <- NULL
test['Fence'] <- NULL
test['PoolQC'] <- NULL
## Versión 5: además de la eliminación de datos perdidos anterior, vamos a centrar y escalar, método preProcess vale pa to
#https://www.rdocumentation.org/packages/caret/versions/6.0-78/topics/preProcess
library(caret)
library(DMwR)
#Estimamos el resto de valores perdidos
noNA_train <- knnImputation(train_data) #Valores por defecto
noNA_test <- knnImputation(test_data) #Valores por defecto
preprocess_train <- preProcess(noNA_train[,2:length(noNA_train)-1], method = c("range"))
preprocess_test <- preProcess(noNA_test[,2:length(noNA_test)-1], method = c("range"))
pred_train <- predict(preprocess_train, noNA_train[,2:length(noNA_train)-1])
pred_test <- predict(preprocess_test, noNA_test[,2:length(noNA_test)-1])
new_train <- train
new_train[,2:length(new_train)] <- pred_train
dim(train)
dim(new_train)
summary(new_train)
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
summary(train)
dim(train)
dim(new_train)
summary(new_train)
###### EN ESTE ARCHIVO VAMOS A LLEVAR A CABO EL PREPROCESADO DE LOS DATOS
train = read.csv("../train.csv", header = TRUE, sep = ",")
test = read.csv("../test.csv", header = TRUE, sep = ",")
## Aunque utilicemos predicción para el resto de valores perdidos, eliminamos aquellos que tienen demasiados
## No pueden estimarse el resto de valores
train['Alley'] <- NULL
train['MiscFeature'] <- NULL
train['Fence'] <- NULL
train['PoolQC'] <- NULL
test['Alley'] <- NULL
test['MiscFeature'] <- NULL
test['Fence'] <- NULL
test['PoolQC'] <- NULL
## Versión 5: además de la eliminación de datos perdidos anterior, vamos a centrar y escalar, método preProcess vale pa to
#https://www.rdocumentation.org/packages/caret/versions/6.0-78/topics/preProcess
library(caret)
library(DMwR)
#Estimamos el resto de valores perdidos
noNA_train <- knnImputation(train_data) #Valores por defecto
noNA_test <- knnImputation(test_data) #Valores por defecto
preprocess_train <- preProcess(noNA_train[,2:length(noNA_train)-1], method = c("range")) #range por defecto en 0-1
preprocess_test <- preProcess(noNA_test[,2:length(noNA_test)-1], method = c("range"))
pred_train <- predict(preprocess_train, noNA_train[,2:length(noNA_train)-1])
pred_test <- predict(preprocess_test, noNA_test[,2:length(noNA_test)-1])
new_train <- train
new_train[,2:length(new_train)-1] <- pred_train
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
summart(new_train)
summary(new_train)
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
dim(pred_train)
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
summary(new_test)
summary(new_train)
summary(noNA_train)
pred_train
dim(pred_train)
dim(noNA_train[,2:length(noNA_train)-1])
dim(train)
summary(train[2])
summary(train[length(train)])
summary(train[length(train)-1])
dim(train)
dim(noNA_train)
dim(pred_train)
dim(noNA_train[,2:length(noNA_train)-1])
summary(tri)
summary(train)
summary(noNA_train[,2:length(noNA_train)-1])
noNA_train[1]
summary(noNA_train[1])
summary(noNA_train[2])
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
noNA_train['Id']
pred_train['Id']
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
noNA_test <- knnImputation(test) #Valores por defecto
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
###### EN ESTE ARCHIVO VAMOS A LLEVAR A CABO EL PREPROCESADO DE LOS DATOS
train = read.csv("../train.csv", header = TRUE, sep = ",")
test = read.csv("../test.csv", header = TRUE, sep = ",")
## Aunque utilicemos predicción para el resto de valores perdidos, eliminamos aquellos que tienen demasiados
## No pueden estimarse el resto de valores
train['Alley'] <- NULL
train['MiscFeature'] <- NULL
train['Fence'] <- NULL
train['PoolQC'] <- NULL
test['Alley'] <- NULL
test['MiscFeature'] <- NULL
test['Fence'] <- NULL
test['PoolQC'] <- NULL
#Estimamos el resto de valores perdidos
noNA_train <- knnImputation(train) #Valores por defecto
noNA_test <- knnImputation(test) #Valores por defecto
preprocess_1 <- preProcess(noNA_train[,2:length(noNA_train)-1], method = c("scale", "center")) #range por defecto en 0-1
preprocess_2 <- preProcess(noNA_test[,2:length(noNA_test)-1], method = c("scale", "center"))
preprocess_1 <- preProcess(noNA_train[,2:length(noNA_train)-1], method = c("scale", "center")) #range por defecto en 0-1
preprocess_2 <- preProcess(noNA_test[,2:length(noNA_test)-1], method = c("scale", "center"))
new_train <- noNA_train
new_train[,2:length(new_train)-1] <- pred_train
new_test <- noNa_test
new_test[,2:length(new_test)-1] <- pred_test
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
dim(noNA_train)
dim(noNA_train[,2:(length(noNA_train)-1)])
dim(noNA_train[,2:length(noNA_train)-1])
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
summary(new_test)
summary(new_train)
summary(new_test)
summary(test)
test = read.csv("../test.csv", header = TRUE, sep = ",")
summary(test)
source('~/Desktop/Universidad/IN/P3/Versión 5/preprocesado_v5.R')
source('~/Desktop/Universidad/IN/P3/Versión 6/preprocesado_v6.R')
summary(new_train)
dim(new_train)
preprocess_1
preprocess_1 <- preProcess(noNA_train[,2:(length(noNA_train)-1)], method = c("corr")) #range por defecto en 0-1
source('~/Desktop/Universidad/IN/P3/Versión 6/preprocesado_v6.R')
corr_train <- cor(train)
corr_train <- cor(train, use = "complete.obs")
aux <- train[typeof(train) == numeric]
summary(train)
summary(train[72])
summary(train[2,3,4,5])
summary(train[c(2,3,4,5)])
summary(train[c(2,3,4,5,17)])
summary(train[c(2,3,5,17)])
summary(train[c(2,4,5,17,18,19,20,26)])
summary(train[c(2,4,5,17,18,19,20,26,34,35,36,37,42, 43,44)])
summary(train[c(2,4,5,17,18,19,20,26,34,35,36,37, 43,44)])
summary(train[c(2,4,5,17,18,19,20,26,34,36,37, 43,44)])
summary(train[c(2,4,5,17,18,19,20,26,34,36,37, 43,44, 46, 47, 48, 49, 50, 51, 53, 55, 58, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74)])
summary(train[c(2,4,5,17,18,19,20,26,34,36,37, 43,44, 46, 47, 48, 49, 50, 51, 53, 55, 58, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74)])
summary(train[c(2,4,5,17,18,19,20,26,34,36,37, 43,44, 46, 47, 48, 49, 50, 51, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74)])
numeric_attr <- train[c(2,4,5,17,18,19,20,26,34,36,37, 43,44, 46, 47, 48, 49, 50, 51, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74)]
numeric_attr <- train[c(2,4,5,17,18,19,20,26,34,36,37, 43,44, 46, 47, 48, 49, 50, 51, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74)]
summary(train[c(2,4,5,17,18,19,20,26,34,36,37, 43,44, 46, 47, 48, 49, 50, 51, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74)])
numeric_attr <- train[c(2,4,5,17,18,19,20,26,34,36,37, 43,44, 46, 47, 48, 49, 50, 51, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74)]
corr_train <- cor(numeric_attr, use = "complete.obs")
corr_train
corr_train
numeric_attr <- train[c(2,4,5,17,18,19,20,26,34,36,37, 43,44, 46, 47, 48, 49, 50, 51, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74,77)]
numeric_attr <- train[c(2,4,5,17,18,19,20,26,34,36,37, 43,44, 46, 47, 48, 49, 50, 51, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74,77)]
corr_train <- cor(numeric_attr, use = "complete.obs")
corr_train
dim(corr_train)
corr_train[,30]
summary(train[48])
summary(train[51])
summary(train[68])
train <- train[-c(2, 18, 36, 37, 48, 50, 51, 68, 69, 70, 71, 72, 73, 74)]
dim(train)
source('~/Desktop/Universidad/IN/P3/Versión 6/preprocesado_v6.R')
write.csv(test, file = "test.csv", sep = ",", row.names = FALSE)
source('~/Desktop/Universidad/IN/P3/Versión 6/preprocesado_v6.R')
setwd("~/Desktop/Universidad/IN/P3/Versión 6")
source('~/Desktop/Universidad/IN/P3/Versión 6/preprocesado_v6.R')
?preProcess
###### EN ESTE ARCHIVO VAMOS A LLEVAR A CABO EL PREPROCESADO DE LOS DATOS
train = read.csv("../train.csv", header = TRUE, sep = ",")
test = read.csv("../test.csv", header = TRUE, sep = ",")
## Trabajamos sobre la versión 4: vamos a aplicar PCA pues la selección de características a mano no ha funcionado
## PCA obtiene el número de componentes (combinación lineal de las anteriormente obtenidas, que nos ofrecen un threshold introducido)
## Vamos a introducir threshold = 0.95 pues no nos importa que tenga muchos datos
library(DMwR)
library(caret)
## Aunque utilicemos predicción para el resto de valores perdidos, eliminamos aquellos que tienen demasiados
## No pueden estimarse el resto de valores
train['Alley'] <- NULL
train['MiscFeature'] <- NULL
train['Fence'] <- NULL
train['PoolQC'] <- NULL
test['Alley'] <- NULL
test['MiscFeature'] <- NULL
test['Fence'] <- NULL
test['PoolQC'] <- NULL
#Estimamos el resto de valores perdidos
train <- knnImputation(train) #Valores por defecto
test <- knnImputation(test) #Valores por defecto
pp_train <- preProcess(train, method = "pca", thresh = 0.95)
pp_train
pp_test <- preProcess(test, method = "pca", thresh = 0.95)
pp_test
data <- c(train[-length(train)], test[-length(test)])
data
dim(data)
dim(train)
aux <- paste(train, test)
dim(aux)
aux
aux <- merge(train, test)
dim(aux)
aux
train[:,0]
train[,0]
train[,1]
train[1,]
train[0,]
aux <- merge(train, test, by = train[0,])
aux <- merge(train, test, by = "Id")
aux
cbind(train[-length(train)], test)
cbind(train[,-length(train)], test)
dim(train)
dim(test)
train = read.csv("../train.csv", header = TRUE, sep = ",")
test = read.csv("../test.csv", header = TRUE, sep = ",")
dim(train)
dim(test)
d_train <- train[-length(train)]
summary(d_train)
aux <- rbind(d_train, text)
aux <- rbind(d_train, test)
dim(aux)
###### EN ESTE ARCHIVO VAMOS A LLEVAR A CABO EL PREPROCESADO DE LOS DATOS
train = read.csv("../train.csv", header = TRUE, sep = ",")
test = read.csv("../test.csv", header = TRUE, sep = ",")
d_train <- train[-length(train)]
data <- rbind(d_train, test)
## Trabajamos sobre la versión 4: vamos a aplicar PCA pues la selección de características a mano no ha funcionado
## PCA obtiene el número de componentes (combinación lineal de las anteriormente obtenidas, que nos ofrecen un threshold introducido)
## Vamos a introducir threshold = 0.95 pues no nos importa que tenga muchos datos
library(DMwR)
library(caret)
## Aunque utilicemos predicción para el resto de valores perdidos, eliminamos aquellos que tienen demasiados
## No pueden estimarse el resto de valores
data['Alley'] <- NULL
data['MiscFeature'] <- NULL
data['Fence'] <- NULL
data['PoolQC'] <- NULL
#Estimamos el resto de valores perdidos
train <- knnImputation(train) #Valores por defecto
test <- knnImputation(test) #Valores por defecto
preprocess <- preProcess(data, method = "pca", thresh = 0.95)
source('~/Desktop/Universidad/IN/P3/Versión 7/preprocesado_v7.R')
preprocess
###### EN ESTE ARCHIVO VAMOS A LLEVAR A CABO EL PREPROCESADO DE LOS DATOS
train = read.csv("../train.csv", header = TRUE, sep = ",")
test = read.csv("../test.csv", header = TRUE, sep = ",")
d_train <- train[-length(train)]
data <- rbind(d_train, test)
## Trabajamos sobre la versión 4: vamos a aplicar PCA pues la selección de características a mano no ha funcionado
## PCA obtiene el número de componentes (combinación lineal de las anteriormente obtenidas, que nos ofrecen un threshold introducido)
## Vamos a introducir threshold = 0.95 pues no nos importa que tenga muchos datos
library(DMwR)
library(caret)
## Aunque utilicemos predicción para el resto de valores perdidos, eliminamos aquellos que tienen demasiados
## No pueden estimarse el resto de valores
data['Alley'] <- NULL
data['MiscFeature'] <- NULL
data['Fence'] <- NULL
data['PoolQC'] <- NULL
#Estimamos el resto de valores perdidos
data <- knnImputation(data) #Valores por defecto
preprocess <- preProcess(data, method = "pca", thresh = 0.9
8)
###### EN ESTE ARCHIVO VAMOS A LLEVAR A CABO EL PREPROCESADO DE LOS DATOS
train = read.csv("../train.csv", header = TRUE, sep = ",")
test = read.csv("../test.csv", header = TRUE, sep = ",")
d_train <- train[-length(train)]
data <- rbind(d_train, test)
## Trabajamos sobre la versión 4: vamos a aplicar PCA pues la selección de características a mano no ha funcionado
## PCA obtiene el número de componentes (combinación lineal de las anteriormente obtenidas, que nos ofrecen un threshold introducido)
## Vamos a introducir threshold = 0.95 pues no nos importa que tenga muchos datos
library(DMwR)
library(caret)
## Aunque utilicemos predicción para el resto de valores perdidos, eliminamos aquellos que tienen demasiados
## No pueden estimarse el resto de valores
data['Alley'] <- NULL
data['MiscFeature'] <- NULL
data['Fence'] <- NULL
data['PoolQC'] <- NULL
#Estimamos el resto de valores perdidos
data <- knnImputation(data) #Valores por defecto
preprocess <- preProcess(data, method = "pca", thresh = 0.98)
preprocess
predicted_data <- predict(preprocess, data)
summary(predicted_data)
dim(predicted_data)
preprocess <- preProcess(data, method = "pca", thresh = 0.95)
predicted_data <- predict(preprocess, data)
predicted_data
dim(predicted_data)
train[0]
train[1]
train[1,1]
train <- predicted_data[1:length(train),]
dim(train)
dim(train)
train = read.csv("../train.csv", header = TRUE, sep = ",")
dim(train)
length(train)
dim(train)[1]
train <- predicted_data[1:dim(train)[1],]
summary(train)
summary(predicted_data)
predicted_data <- rbind(id, predicted_data)
id <- data[1]
data <- data[-1]
data <- knnImputation(data) #Valores por defecto
preprocess <- preProcess(data, method = "pca", thresh = 0.95)
predicted_data <- predict(preprocess, data)
predicted_data <- rbind(id, predicted_data)
dim(id)
dim(predicted_data)
predicted_data <- cbind(id, predicted_data)
train <- predicted_data[1:dim(train)[1],]
summary(train)
test <- predicted_data[(dim(train)[1]+1):dim(predicted_data)[1],]
dim(test)
dim(train)
source('~/Desktop/Universidad/IN/P3/Versión 7/preprocesado_v7.R')
setwd("~/Desktop/Universidad/IN/P3/Versión 7")
source('~/Desktop/Universidad/IN/P3/Versión 7/preprocesado_v7.R')
source('~/Desktop/Universidad/IN/P3/Versión 7/preprocesado_v7.R')
source('~/Desktop/Universidad/IN/P3/Versión 7/preprocesado_v7.R')
